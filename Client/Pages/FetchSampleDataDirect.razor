@page "/fetchsampledatafromgetjsonasyncentity"
@using EFBlazorBasics_Wasm.Shared
@using Newtonsoft.Json
@inject HttpClient Http

<h1>Sample Activity Data - Direct</h1>

<p>This component demonstrates fetching static sample data from service generated from a json string.</p>

<h1>Direct</h1>
<h2>Uses:</h2>
<code>activitys = await Http.GetFromJsonAsync&lt;Activity[]&gt;("SampleActivitys");</code>
<h2>Activities</h2>
@if (activitys == null)
{
    <p><em>Loading Activitys...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Helper</th>
                <th>Round.No</th>
                <th>Task</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in activitys)
            {
                <tr>
                    <td>@activity.Id</td>
                    <td>@activity.Helper.Name</td>
                    <td>@activity.Round.No</td>
                    <td>@activity.Task</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Helpers</h2>
@if (Helpers == null)
{
    <p><em>Loading Helpers...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hlpr in Helpers)
            {
                <tr>
                    <td>@hlpr.Id</td>
                    <td>@hlpr.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Rounds</h2>
@if (Rounds == null)
{
    <p><em>Loading Rounds...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Round No.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var round in Rounds)
            {
                <tr>
                    <td>@round.Id</td>
                    <td>@round.No</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Activity[] activitys;
    private List<Helper> Helpers;
    private List<Round> Rounds;

    protected override async Task OnInitializedAsync()
    {
        activitys = await Http.GetFromJsonAsync<Activity[]>("SampleActivitys");
        Helpers = new List<Helper>();
        Rounds = new List<Round>();
        foreach (Activity act in activitys)
        {
            Helper help = act.Helper;
            if (help != null)
                Helpers.Add(help);
            Round round = act.Round;
            if (round != null)
                Rounds.Add(round);
        }
        StateHasChanged();

    }

}
